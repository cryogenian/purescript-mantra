// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff_Ref_Unsafe = require("Control.Monad.Eff.Ref.Unsafe");
var Control_Monad_Eff_Ref = require("Control.Monad.Eff.Ref");
var Data_Monoid = require("Data.Monoid");
var Control_Monad_Eff = require("Control.Monad.Eff");
function Subscription(value0) {
    this.value0 = value0;
};
Subscription.create = function (value0) {
    return new Subscription(value0);
};
function Inserted(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Inserted.create = function (value0) {
    return function (value1) {
        return new Inserted(value0, value1);
    };
};
function Updated(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
Updated.create = function (value0) {
    return function (value1) {
        return new Updated(value0, value1);
    };
};
function Removed(value0) {
    this.value0 = value0;
};
Removed.create = function (value0) {
    return new Removed(value0);
};
function Computed(value0) {
    this.value0 = value0;
};
Computed.create = function (value0) {
    return new Computed(value0);
};
function newRVar(value) {  return function() {    return (function () {      function RVar(value) {        var self = this;        self.value = value;        self.listeners = [];        self.subscribe = function (listener) {          this.listeners.push(listener);          return new Subscription(function() {            for (var i = 0; i < self.listeners.length; i++) {              if (self.listeners[i] === listener) {                self.listeners.splice(i, 1);                break;              }            }          });        };        self.update = function (value) {          self.value = value;          for (var i = 0; i < self.listeners.length; i++) {            self.listeners[i](value);          }        };      };      return new RVar(value);    })();  };};
function newRArray() {    return (function () {      function RArray() {        var self = this;        self.values = [];        self.listeners = [];        self.subscribe = function (listener) {          this.listeners.push(listener);          return Subscription(function() {            for (var i = 0; i < self.listeners.length; i++) {              if (self.listeners[i] === listener) {                self.listeners.splice(i, 1);                break;              }            }          });        };        self.insert = function (value, index) {          self.values.splice(index, 0, value);          for (var i = 0; i < self.listeners.length; i++) {            self.listeners[i](Inserted(value)(index));          }        };        self.remove = function (index) {          self.values.splice(index, 1);          for (var i = 0; i < self.listeners.length; i++) {            self.listeners[i](Removed(index));          }        };        self.update = function (value, index) {          self.values[index] = index;          for (var i = 0; i < self.listeners.length; i++) {            self.listeners[i](Updated(value)(index));          }        };      };      return new RArray();    })();};
function readRVar(ref) {  return function() {    return ref.value;  };};
function readRArray(arr) {  return function() {    return arr.values;  };};
function writeRVar(ref) {  return function (value) {    return function() {      ref.update(value);    };  };};
function peekRArray(arr) {  return function(i) {    return arr.values[i];  };};
function insertRArray(arr) {  return function (value) {    return function(index) {      return function() {        arr.insert(value, index);      };    };  };};
function removeRArray(arr) {  return function(index) {    return function() {      arr.remove(index);    };  };};
function updateRArray(arr) {  return function (value) {    return function(index) {      return function() {        arr.update(value, index);      };    };  };};
function subscribe(ref) {  return function(f) {    return function() {      return ref.subscribe(function(value) {        f(value)();      });    };  };};
function subscribeArray(arr) {  return function(f) {    return function() {      return arr.subscribe(function(value) {        f(value)();      });    };  };};
var toComputedArray = function (arr) {
    return new Computed({
        read: readRArray(arr), 
        subscribe: function (f) {
            return subscribeArray(arr)(function (_) {
                return Prelude[">>="](Control_Monad_Eff.bindEff)(readRArray(arr))(f);
            });
        }
    });
};
var toComputed = function (ref) {
    return new Computed({
        read: readRVar(ref), 
        subscribe: subscribe(ref)
    });
};
var subscribeComputed = function (_75) {
    return function (_76) {
        return _75.value0.subscribe(_76);
    };
};
var showArrayChange = function (__dict_Show_0) {
    return new Prelude.Show(function (_79) {
        if (_79 instanceof Inserted) {
            return "Inserted " + (Prelude.show(__dict_Show_0)(_79.value0) + (" at " + Prelude.show(Prelude.showNumber)(_79.value1)));
        };
        if (_79 instanceof Updated) {
            return "Updated " + (Prelude.show(Prelude.showNumber)(_79.value1) + (" to " + Prelude.show(__dict_Show_0)(_79.value0)));
        };
        if (_79 instanceof Removed) {
            return "Removed at index " + Prelude.show(Prelude.showNumber)(_79.value0);
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupSubscription = new Prelude.Semigroup(function (_77) {
    return function (_78) {
        return new Subscription(function __do() {
            _77.value0();
            return _78.value0();
        });
    };
});
var readComputed = function (_74) {
    return _74.value0.read;
};
var monoidSubscription = new Data_Monoid.Monoid(function () {
    return semigroupSubscription;
}, new Subscription(Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit)));
var modifyRVar = function (v) {
    return function (f) {
        return function __do() {
            var _5 = readRVar(v)();
            return writeRVar(v)(f(_5))();
        };
    };
};
var applyComputed = new Prelude.Apply(function (_82) {
    return function (_83) {
        return new Computed({
            read: function __do() {
                var _15 = _82.value0.read();
                var _14 = _83.value0.read();
                return _15(_14);
            }, 
            subscribe: function (ob) {
                return function __do() {
                    var _19 = _82.value0.subscribe(function (f$prime) {
                        return function __do() {
                            var _16 = _83.value0.read();
                            return ob(f$prime(_16))();
                        };
                    })();
                    var _18 = _83.value0.subscribe(function (x$prime) {
                        return function __do() {
                            var _17 = _82.value0.read();
                            return ob(_17(x$prime))();
                        };
                    })();
                    return Prelude["<>"](semigroupSubscription)(_19)(_18);
                };
            }
        });
    };
}, function () {
    return functorComputed;
});
var applicativeComputed = new Prelude.Applicative(function () {
    return applyComputed;
}, function (a) {
    return new Computed({
        read: Prelude.pure(Control_Monad_Eff.applicativeEff)(a), 
        subscribe: function (_) {
            return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Monoid.mempty(monoidSubscription));
        }
    });
});
var functorComputed = new Prelude.Functor(Prelude.liftA1(applicativeComputed));
var bindComputed = new Prelude.Bind(function (_80) {
    return function (_81) {
        return new Computed({
            read: function __do() {
                var _6 = _80.value0.read();
                return (function () {
                    var _278 = _81(_6);
                    return _278.value0.read;
                })()();
            }, 
            subscribe: function (ob) {
                return function __do() {
                    var _13 = _80.value0.read();
                    return (function () {
                        var _281 = _81(_13);
                        return function __do() {
                            var _12 = _281.value0.subscribe(ob)();
                            var _11 = Control_Monad_Eff_Ref_Unsafe.unsafeRunRef(Control_Monad_Eff_Ref.newRef(_12))();
                            var _10 = _80.value0.subscribe(function (a$prime) {
                                return function __do() {
                                    var _8 = Control_Monad_Eff_Ref_Unsafe.unsafeRunRef(Control_Monad_Eff_Ref.readRef(_11))();
                                    _8.value0();
                                    var _285 = _81(a$prime);
                                    Prelude[">>="](Control_Monad_Eff.bindEff)(_285.value0.read)(ob)();
                                    var _7 = _285.value0.subscribe(ob)();
                                    return Control_Monad_Eff_Ref_Unsafe.unsafeRunRef(Control_Monad_Eff_Ref.writeRef(_11)(_7))();
                                };
                            })();
                            return Prelude["<>"](semigroupSubscription)(_10)(new Subscription(function __do() {
                                var _9 = Control_Monad_Eff_Ref_Unsafe.unsafeRunRef(Control_Monad_Eff_Ref.readRef(_11))();
                                return _9.value0();
                            }));
                        };
                    })()();
                };
            }
        });
    };
}, function () {
    return applyComputed;
});
var monadComputed = new Prelude.Monad(function () {
    return applicativeComputed;
}, function () {
    return bindComputed;
});
module.exports = {
    Computed: Computed, 
    Inserted: Inserted, 
    Removed: Removed, 
    Subscription: Subscription, 
    Updated: Updated, 
    applicativeComputed: applicativeComputed, 
    applyComputed: applyComputed, 
    bindComputed: bindComputed, 
    functorComputed: functorComputed, 
    insertRArray: insertRArray, 
    modifyRVar: modifyRVar, 
    monadComputed: monadComputed, 
    monoidSubscription: monoidSubscription, 
    newRArray: newRArray, 
    newRVar: newRVar, 
    peekRArray: peekRArray, 
    readComputed: readComputed, 
    readRArray: readRArray, 
    readRVar: readRVar, 
    removeRArray: removeRArray, 
    semigroupSubscription: semigroupSubscription, 
    showArrayChange: showArrayChange, 
    subscribe: subscribe, 
    subscribeArray: subscribeArray, 
    subscribeComputed: subscribeComputed, 
    toComputed: toComputed, 
    toComputedArray: toComputedArray, 
    updateRArray: updateRArray, 
    writeRVar: writeRVar
};
