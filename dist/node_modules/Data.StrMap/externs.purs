-- Generated by psc-make version 0.6.2
module Data.StrMap where
import Data.StrMap ()
import Control.Monad.Eff ()
import Prelude ()
import Data.Function ()
import Data.Monoid ()
import Data.Foldable ()
import Data.Tuple ()
import Data.Traversable ()
import Data.Maybe ()
import Data.StrMap.ST ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Data.Foldable ()
import Data.Function ()
import Data.Maybe ()
import Data.Monoid ()
import Data.Monoid.All ()
import Data.Tuple ()
import Data.Traversable ()
import Control.Monad.ST ()
import Data.Array ()
import Data.StrMap.ST ()
foreign import data StrMap :: * -> *
foreign import runST :: forall a r. (forall h. Control.Monad.Eff.Eff (st :: Control.Monad.ST.ST h | r) (Data.StrMap.ST.STStrMap h a)) -> Control.Monad.Eff.Eff r (Data.StrMap.StrMap a)
foreign import freezeST :: forall a h r. Data.StrMap.ST.STStrMap h a -> Control.Monad.Eff.Eff (st :: Control.Monad.ST.ST h | r) (Data.StrMap.StrMap a)
foreign import thawST :: forall a h r. Data.StrMap.StrMap a -> Control.Monad.Eff.Eff (st :: Control.Monad.ST.ST h | r) (Data.StrMap.ST.STStrMap h a)
foreign import all :: forall a. (Prim.String -> a -> Prim.Boolean) -> Data.StrMap.StrMap a -> Prim.Boolean
foreign import foldMaybe :: forall a z. (z -> Prim.String -> a -> Data.Maybe.Maybe z) -> z -> Data.StrMap.StrMap a -> z
foreign import foldM :: forall a m z. (Prelude.Monad m) => (z -> Prim.String -> a -> m z) -> z -> Data.StrMap.StrMap a -> m z
foreign import foldMap :: forall a m. (Data.Monoid.Monoid m) => (Prim.String -> a -> m) -> Data.StrMap.StrMap a -> m
foreign import fold :: forall a z. (z -> Prim.String -> a -> z) -> z -> Data.StrMap.StrMap a -> z
foreign import isSubmap :: forall a. (Prelude.Eq a) => Data.StrMap.StrMap a -> Data.StrMap.StrMap a -> Prim.Boolean
foreign import map :: forall a b. (a -> b) -> Data.StrMap.StrMap a -> Data.StrMap.StrMap b
foreign import unions :: forall a. [Data.StrMap.StrMap a] -> Data.StrMap.StrMap a
foreign import union :: forall a. Data.StrMap.StrMap a -> Data.StrMap.StrMap a -> Data.StrMap.StrMap a
foreign import values :: forall a. Data.StrMap.StrMap a -> [a]
foreign import keys :: forall a. Data.StrMap.StrMap a -> [Prim.String]
foreign import update :: forall a. (a -> Data.Maybe.Maybe a) -> Prim.String -> Data.StrMap.StrMap a -> Data.StrMap.StrMap a
foreign import alter :: forall a. (Data.Maybe.Maybe a -> Data.Maybe.Maybe a) -> Prim.String -> Data.StrMap.StrMap a -> Data.StrMap.StrMap a
foreign import member :: forall a. Prim.String -> Data.StrMap.StrMap a -> Prim.Boolean
foreign import delete :: forall a. Prim.String -> Data.StrMap.StrMap a -> Data.StrMap.StrMap a
foreign import fromList :: forall a. [Data.Tuple.Tuple Prim.String a] -> Data.StrMap.StrMap a
foreign import toList :: forall a. Data.StrMap.StrMap a -> [Data.Tuple.Tuple Prim.String a]
foreign import lookup :: forall a. Prim.String -> Data.StrMap.StrMap a -> Data.Maybe.Maybe a
foreign import insert :: forall a. Prim.String -> a -> Data.StrMap.StrMap a -> Data.StrMap.StrMap a
foreign import singleton :: forall a. Prim.String -> a -> Data.StrMap.StrMap a
foreign import size :: forall a. Data.StrMap.StrMap a -> Prim.Number
foreign import isEmpty :: forall a. Data.StrMap.StrMap a -> Prim.Boolean
foreign import empty :: forall a. Data.StrMap.StrMap a
foreign import instance functorStrMap :: Prelude.Functor Data.StrMap.StrMap
foreign import instance foldableStrMap :: Data.Foldable.Foldable Data.StrMap.StrMap
foreign import instance traversableStrMap :: Data.Traversable.Traversable Data.StrMap.StrMap
foreign import instance eqStrMap :: (Prelude.Eq a) => Prelude.Eq (Data.StrMap.StrMap a)
foreign import instance showStrMap :: (Prelude.Show a) => Prelude.Show (Data.StrMap.StrMap a)
foreign import instance semigroupStrMap :: (Prelude.Semigroup a) => Prelude.Semigroup (Data.StrMap.StrMap a)
