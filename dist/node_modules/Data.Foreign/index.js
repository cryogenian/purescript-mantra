// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Either = require("Data.Either");
function TypeMismatch(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
TypeMismatch.create = function (value0) {
    return function (value1) {
        return new TypeMismatch(value0, value1);
    };
};
function ErrorAtIndex(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
ErrorAtIndex.create = function (value0) {
    return function (value1) {
        return new ErrorAtIndex(value0, value1);
    };
};
function ErrorAtProperty(value0, value1) {
    this.value0 = value0;
    this.value1 = value1;
};
ErrorAtProperty.create = function (value0) {
    return function (value1) {
        return new ErrorAtProperty(value0, value1);
    };
};
function JSONError(value0) {
    this.value0 = value0;
};
JSONError.create = function (value0) {
    return new JSONError(value0);
};

  function parseJSONImpl(left, right, str) {
    try {
      return right(JSON.parse(str));
    } catch (e) {
      return left(e.toString());
    }
  }
  ;

  function toForeign(value) {
    return value;
  }
  ;

  function unsafeFromForeign(value) {
    return value;
  }
  ;

  function typeOf(value) {
    return typeof value;
  }
  ;

  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;

  function isNull(value) {
    return value === null;
  }
  ;

  function isUndefined(value) {
    return value === undefined;
  }
  ;

  var isArray = Array.isArray || function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };
  ;
var unsafeReadPrim = function (_2) {
    return function (_3) {
        if (tagOf(_3) === _2) {
            return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_3));
        };
        return new Data_Either.Left(new TypeMismatch(_2, tagOf(_3)));
    };
};
var showForeignError = new Prelude.Show(function (_5) {
    if (_5 instanceof TypeMismatch) {
        return "Type mismatch: expected " + (_5.value0 + (", found " + _5.value1));
    };
    if (_5 instanceof ErrorAtIndex) {
        return "Error at array index " + (Prelude.show(Prelude.showNumber)(_5.value0) + (": " + Prelude.show(showForeignError)(_5.value1)));
    };
    if (_5 instanceof ErrorAtProperty) {
        return "Error at property " + (Prelude.show(Prelude.showString)(_5.value0) + (": " + Prelude.show(showForeignError)(_5.value1)));
    };
    if (_5 instanceof JSONError) {
        return "JSON error: " + _5.value0;
    };
    throw new Error("Failed pattern match");
});
var readString = unsafeReadPrim("String");
var readNumber = unsafeReadPrim("Number");
var readBoolean = unsafeReadPrim("Boolean");
var readArray = function (_4) {
    if (isArray(_4)) {
        return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_4));
    };
    return new Data_Either.Left(new TypeMismatch("array", tagOf(_4)));
};
var parseJSON = function (json) {
    return parseJSONImpl(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Either.Left.create)(JSONError.create), Data_Either.Right.create, json);
};
var eqForeignError = new Prelude.Eq(function (a) {
    return function (b) {
        return !Prelude["=="](eqForeignError)(a)(b);
    };
}, function (_6) {
    return function (_7) {
        if (_6 instanceof TypeMismatch && _7 instanceof TypeMismatch) {
            return _6.value0 === _7.value0 && _6.value1 === _7.value1;
        };
        if (_6 instanceof ErrorAtIndex && _7 instanceof ErrorAtIndex) {
            return _6.value0 === _7.value0 && Prelude["=="](eqForeignError)(_6.value1)(_7.value1);
        };
        if (_6 instanceof ErrorAtProperty && _7 instanceof ErrorAtProperty) {
            return _6.value0 === _7.value0 && Prelude["=="](eqForeignError)(_6.value1)(_7.value1);
        };
        if (_6 instanceof JSONError && _7 instanceof JSONError) {
            return _6.value0 === _7.value0;
        };
        return false;
    };
});
module.exports = {
    ErrorAtIndex: ErrorAtIndex, 
    ErrorAtProperty: ErrorAtProperty, 
    JSONError: JSONError, 
    TypeMismatch: TypeMismatch, 
    eqForeignError: eqForeignError, 
    isArray: isArray, 
    isNull: isNull, 
    isUndefined: isUndefined, 
    parseJSON: parseJSON, 
    readArray: readArray, 
    readBoolean: readBoolean, 
    readNumber: readNumber, 
    readString: readString, 
    showForeignError: showForeignError, 
    tagOf: tagOf, 
    toForeign: toForeign, 
    typeOf: typeOf, 
    unsafeFromForeign: unsafeFromForeign
};
