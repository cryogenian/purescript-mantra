-- Generated by psc-make version 0.6.2
module Main where
import Data.Function ()
import Main ()
import Signal ()
import Data.Foldable ()
import Prelude ()
import Data.Maybe ()
import Control.Monad.JQuery ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Control.Reactive ()
import Data.Maybe ()
import Data.Tuple ()
import Data.Foldable ()
import Data.Traversable ()
import Control.Monad.JQuery ()
import Data.StrMap ()
import Data.Function ()
import Signal ()
import Signal.Time ()
import Signal.Extension ()
import Utils ()
type Node = { tagName :: Prim.String, dataset :: Data.StrMap.StrMap Prim.String, id :: Prim.String }
foreign import data Event :: *
foreign import main :: forall t176. Control.Monad.Eff.Eff (dom :: DOM.DOM | t176) Control.Monad.JQuery.JQuery
foreign import stateSig :: Signal.Signal { active :: Prim.Boolean }
foreign import h1Clicked :: forall t151. Signal.Signal ({ active :: Prim.Boolean | t151 } -> { active :: Prim.Boolean | t151 })
foreign import toggleState :: forall o. { active :: Prim.Boolean | o } -> { active :: Prim.Boolean | o }
foreign import state :: { active :: Prim.Boolean }
foreign import render :: forall t35 t42. { active :: Prim.Boolean | t42 } -> Control.Monad.Eff.Eff (dom :: DOM.DOM | t35) Control.Monad.JQuery.JQuery
foreign import init :: forall e. Control.Monad.Eff.Eff e Prelude.Unit
foreign import idEq :: Prim.String -> Data.Maybe.Maybe Main.Node -> Prim.Boolean
foreign import modifyWhen :: forall a s. (s -> s) -> (a -> Prim.Boolean) -> a -> s -> s
foreign import combine :: forall a s t. (Data.Traversable.Traversable t) => t (a -> s -> s) -> a -> s -> s
foreign import clickTargets :: Signal.Signal (Data.Maybe.Maybe { tagName :: Prim.String, dataset :: Data.StrMap.StrMap Prim.String, id :: Prim.String })
foreign import targetStream :: Prim.String -> Signal.Signal (Data.Maybe.Maybe { tagName :: Prim.String, dataset :: Data.StrMap.StrMap Prim.String, id :: Prim.String })
foreign import eventStream :: Prim.String -> Signal.Signal (Data.Maybe.Maybe Main.Event)
foreign import document :: Main.Node
foreign import eventStreamFn :: forall s. Data.Function.Fn4 (s -> Data.Maybe.Maybe s) (Data.Maybe.Maybe s) (s -> Signal.Signal s) Prim.String (Signal.Signal (Data.Maybe.Maybe Main.Event))
foreign import target :: Main.Event -> Main.Node
