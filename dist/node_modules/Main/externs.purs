-- Generated by psc-make version 0.6.2
module Main where
import Prelude ()
import Control.Reactive ()
import Main ()
import Signal ()
import Signal.Time ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Control.Reactive ()
import Signal ()
import Signal.Time ()
import Data.StrMap ()
data MantraEvent = Silence  | MouseEvent  | KeyboardEvent 
newtype Component (s :: *) (e :: # !) = Component { render :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, modify :: (s -> s) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, get :: Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) s, set :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, state :: Control.Reactive.RVar s }
foreign import data Mani :: !
foreign import data Om :: !
foreign import data Event :: *
foreign import main :: forall e. Control.Monad.Eff.Eff (mantra :: Main.Om, reactive :: Control.Reactive.Reactive | e) Prelude.Unit
foreign import comp2 :: forall t107. Prim.Number -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | t107) (Main.Component Prim.Number t107)
foreign import rf :: forall e. Prim.Number -> Control.Monad.Eff.Eff e Prelude.Unit
foreign import defineComponent :: forall s e. (s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component s e)
foreign import nothing :: Main.Event
foreign import trace :: forall a e. a -> Control.Monad.Eff.Eff e a
foreign import log :: forall a. a -> a
