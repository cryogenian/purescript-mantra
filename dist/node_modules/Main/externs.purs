-- Generated by psc-make version 0.6.2
module Main where
import Prelude ()
import Control.Reactive ()
import Main ()
import Utils ()
import Data.Foldable ()
import Signal ()
import Signal.Time ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Control.Reactive ()
import Data.Foldable ()
import Signal ()
import Signal.Time ()
import Utils ()
newtype Component (input :: *) (output :: *) = Component { output :: Control.Reactive.RVar output, input :: Control.Reactive.RVar input }
newtype Componen (s :: *) (e :: # !) = Componen { render :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, modify :: (s -> s) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, get :: Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) s, set :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, state :: Control.Reactive.RVar s }
foreign import data Event :: *
foreign import main :: forall t214. Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | t214) Prelude.Unit
foreign import mkTest :: forall t185. Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | t185) (Main.Component Prim.Number Prim.Number)
foreign import parent :: forall t204. Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | t204) (Main.Component [Prim.Number] Prim.Number)
foreign import renderP :: forall e. [Prim.Number] -> Control.Monad.Eff.Eff e Prelude.Unit
foreign import renderTst :: forall e. Prim.Number -> Control.Monad.Eff.Eff e Prelude.Unit
foreign import defineComponent :: forall inp out e. inp -> out -> (inp -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
foreign import init :: forall inp out e. (inp -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
foreign import sub :: forall inp out e. (out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Control.Reactive.Subscription
foreign import update :: forall inp out e. (inp -> inp) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit
foreign import set :: forall inp out e. inp -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit
foreign import mkComponent :: forall inp out e. inp -> out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
