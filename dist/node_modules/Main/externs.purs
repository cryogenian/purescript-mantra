-- Generated by psc-make version 0.6.2
module Main where
import Prelude ()
import Control.Reactive ()
import Main ()
import Utils ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Control.Reactive ()
import Data.Foldable ()
import Signal ()
import Signal.Time ()
import Utils ()
type Dial (a :: *) (b :: *) (e :: # !) = a -> b -> Control.Monad.Eff.Eff e (Main.Component a b)
newtype Component (input :: *) (output :: *) = Component { output :: Control.Reactive.RVar output, input :: Control.Reactive.RVar input }
newtype Componen (s :: *) (e :: # !) = Componen { render :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, modify :: (s -> s) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, get :: Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) s, set :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, state :: Control.Reactive.RVar s }
foreign import data Event :: *
foreign import main :: forall t135. Control.Monad.Eff.Eff t135 Prelude.Unit
foreign import child :: forall t192 t193 t198. t198 -> t193 -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | t192) (Main.Component t198 t193)
foreign import defineComponent :: forall inp out e. (inp -> out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> inp -> out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
foreign import init :: forall inp out e. (inp -> out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
foreign import sub :: forall inp out e. (out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Control.Reactive.Subscription
foreign import update :: forall inp out e. (inp -> inp) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit
foreign import set :: forall inp out e. inp -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
foreign import mkComponent :: forall inp out e. inp -> out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
