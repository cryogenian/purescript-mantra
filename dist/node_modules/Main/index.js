// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Reactive = require("Control.Reactive");
var Utils = require("Utils");
var Data_Foldable = require("Data.Foldable");
var Signal = require("Signal");
var Signal_Time = require("Signal.Time");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Component = {
    create: function (value) {
        return value;
    }
};
var Componen = {
    create: function (value) {
        return value;
    }
};
var update = function (_6) {
    return function (_7) {
        return Control_Reactive.modifyRVar(_7.input)(_6);
    };
};
var sub = function (_8) {
    return function (_9) {
        return Control_Reactive.subscribe(_9.output)(_8);
    };
};
var set = function (_4) {
    return function (_5) {
        return function __do() {
            Control_Reactive.writeRVar(_5.input)(_4)();
            return Prelude.unit;
        };
    };
};
var renderTst = Utils.whisper;
var renderP = function (nums) {
    return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(nums)(renderTst);
};
var mkComponent = function (input) {
    return function (output) {
        return function __do() {
            var _1 = Control_Reactive.newRVar(input)();
            var _0 = Control_Reactive.newRVar(output)();
            return {
                input: _1, 
                output: _0
            };
        };
    };
};
var init = function (_10) {
    return function (_11) {
        return function __do() {
            Control_Reactive.subscribe(_11.input)(_10)();
            return _11;
        };
    };
};
var defineComponent = function (input) {
    return function (output) {
        return function (initFn) {
            return Prelude[">>="](Control_Monad_Eff.bindEff)(mkComponent(input)(output))(init(initFn));
        };
    };
};
var mkTest = defineComponent(0)(0)(function (input) {
    return function __do() {
        Utils.whisper("foo")();
        return Utils.whisper(input)();
    };
});
var parent = defineComponent([ 0 ])(0)(function (input) {
    return renderP(input);
});
var main = function __do() {
    var _2 = parent();
    Utils.whisper(_2)();
    return Signal.runSignal(Signal["~>"](Signal.functorSignal)(Signal_Time.every(1000))(function (_) {
        return update(function (_3) {
            if (_3.length >= 1) {
                var _25 = _3.slice(1);
                return Prelude[":"](_3[0] + 1)(Prelude[":"](_3[0])(_25));
            };
            throw new Error("Failed pattern match");
        })(_2);
    }))();
};
module.exports = {
    Componen: Componen, 
    Component: Component, 
    defineComponent: defineComponent, 
    init: init, 
    main: main, 
    mkComponent: mkComponent, 
    mkTest: mkTest, 
    parent: parent, 
    renderP: renderP, 
    renderTst: renderTst, 
    set: set, 
    sub: sub, 
    update: update
};
