// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Reactive = require("Control.Reactive");
var Utils = require("Utils");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Component = {
    create: function (value) {
        return value;
    }
};
var Componen = {
    create: function (value) {
        return value;
    }
};
var update = function (_5) {
    return function (_6) {
        return Control_Reactive.modifyRVar(_6.input)(_5);
    };
};
var sub = function (_7) {
    return function (_8) {
        return Control_Reactive.subscribe(_8.output)(_7);
    };
};
var set = function (_3) {
    return function (_4) {
        return function __do() {
            Control_Reactive.writeRVar(_4.input)(_3)();
            return _4;
        };
    };
};
var mkComponent = function (input) {
    return function (output) {
        return function __do() {
            var _1 = Control_Reactive.newRVar(input)();
            var _0 = Control_Reactive.newRVar(output)();
            return {
                input: _1, 
                output: _0
            };
        };
    };
};
var main = Utils.whisper("foobar");
var init = function (_9) {
    return function (_10) {
        return function __do() {
            var _2 = Control_Reactive.readRVar(_10.output)();
            Control_Reactive.subscribe(_10.input)(function (inp) {
                return _9(inp)(_2);
            })();
            return _10;
        };
    };
};
var defineComponent = function (initFn) {
    return function (input) {
        return function (output) {
            return Prelude[">>="](Control_Monad_Eff.bindEff)(mkComponent(input)(output))(init(initFn));
        };
    };
};
var child = defineComponent(function (input) {
    return function (output) {
        return Utils.whisper(input);
    };
});
module.exports = {
    Componen: Componen, 
    Component: Component, 
    child: child, 
    defineComponent: defineComponent, 
    init: init, 
    main: main, 
    mkComponent: mkComponent, 
    set: set, 
    sub: sub, 
    update: update
};
