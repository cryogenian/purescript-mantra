// Generated by psc-make version 0.6.2
"use strict";
var Data_Function = require("Data.Function");
var Signal = require("Signal");
var Data_Foldable = require("Data.Foldable");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Control_Monad_JQuery = require("Control.Monad.JQuery");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Signal_Extension = require("Signal.Extension");

function target(event) {
  var out = event.target;
  if (!out.dataset) {
    out.dataset = {};
  }
  return out;
}
;

function eventStreamFn(just, nothing, constant, type) {
  var out = constant(nothing);
  window.addEventListener(type, function(e) {
    out.set(just(e));
  });
  return out;
}
;

var document = window.document
;

function init() {
  window["jQuery"] = require("jquery");
}
;
var toggleState = function (state_1) {
    var _5 = {};
    for (var _6 in state_1) {
        if (state_1.hasOwnProperty(_6)) {
            _5[_6] = state_1[_6];
        };
    };
    _5.active = !state_1.active;
    return _5;
};
var state = {
    active: false
};
var render = function (state_1) {
    return function __do() {
        var _2 = Control_Monad_JQuery.create("<p class='page-header text-center'/>")();
        var _1 = Control_Monad_JQuery.create("<h1 id='h1'/>")();
        return (function () {
            var color = state_1.active ? "red" : "blue";
            return function __do() {
                Control_Monad_JQuery.css({
                    color: color
                })(_1)();
                Control_Monad_JQuery.appendText("Trololo")(_1)();
                Control_Monad_JQuery.append(_1)(_2)();
                return _2;
            };
        })()();
    };
};
var modifyWhen = function (func) {
    return function (pred) {
        return function (a) {
            return pred(a) ? func : Prelude.id(Prelude.categoryArr);
        };
    };
};
var idEq = function (id) {
    return function (mbEl) {
        return Data_Maybe.fromMaybe(false)(Prelude[">>="](Data_Maybe.bindMaybe)(mbEl)(function (_0) {
            return Prelude["return"](Data_Maybe.monadMaybe)(_0.id === id);
        }));
    };
};
var eventStream = Data_Function.runFn4(eventStreamFn)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Signal.constant);
var targetStream = function (name) {
    return Signal_Extension["~~>"](Data_Maybe.applicativeMaybe)(eventStream(name))(target);
};
var combine = function (__dict_Traversable_0) {
    return function (modifies) {
        return function (mb) {
            var applied = Prelude["<$>"](__dict_Traversable_0["__superclass_Prelude.Functor_0"]())(function (f) {
                return f(mb);
            })(modifies);
            return Data_Foldable.foldl(__dict_Traversable_0["__superclass_Data.Foldable.Foldable_1"]())(function (a) {
                return function (b) {
                    return Prelude["<<<"](Prelude.semigroupoidArr)(a)(b);
                };
            })(Prelude.id(Prelude.categoryArr))(applied);
        };
    };
};
var clickTargets = targetStream("click");
var h1Clicked = Signal["~>"](Signal.functorSignal)(clickTargets)(modifyWhen(toggleState)(idEq("h1")));
var stateSig = Signal.foldp(Prelude["$"])(state)(h1Clicked);
var main = function __do() {
    init();
    return Control_Monad_JQuery.ready(Signal.runSignal(Signal["~>"](Signal.functorSignal)(stateSig)(function (state_1) {
        return function __do() {
            var _4 = Control_Monad_JQuery.select("#target")();
            Control_Monad_JQuery.clear(_4)();
            var _3 = render(state_1)();
            Control_Monad_JQuery.append(_3)(_4)();
            return Prelude.unit;
        };
    })))();
};
module.exports = {
    clickTargets: clickTargets, 
    combine: combine, 
    document: document, 
    eventStream: eventStream, 
    eventStreamFn: eventStreamFn, 
    h1Clicked: h1Clicked, 
    idEq: idEq, 
    init: init, 
    main: main, 
    modifyWhen: modifyWhen, 
    render: render, 
    state: state, 
    stateSig: stateSig, 
    target: target, 
    targetStream: targetStream, 
    toggleState: toggleState
};
