// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Extend = require("Control.Extend");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function Nothing() {

};
Nothing.value = new Nothing();
function Just(value0) {
    this.value0 = value0;
};
Just.create = function (value0) {
    return new Just(value0);
};
var showMaybe = function (__dict_Show_0) {
    return new Prelude.Show(function (_95) {
        if (_95 instanceof Just) {
            return "Just (" + (Prelude.show(__dict_Show_0)(_95.value0) + ")");
        };
        if (_95 instanceof Nothing) {
            return "Nothing";
        };
        throw new Error("Failed pattern match");
    });
};
var semigroupMaybe = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_93) {
        return function (_94) {
            if (_93 instanceof Nothing) {
                return _94;
            };
            if (_94 instanceof Nothing) {
                return _93;
            };
            if (_93 instanceof Just && _94 instanceof Just) {
                return new Just(Prelude["<>"](__dict_Semigroup_1)(_93.value0)(_94.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
};
var maybe = function (_80) {
    return function (_81) {
        return function (_82) {
            if (_82 instanceof Nothing) {
                return _80;
            };
            if (_82 instanceof Just) {
                return _81(_82.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isNothing = maybe(true)(Prelude["const"](false));
var isJust = maybe(false)(Prelude["const"](true));
var functorMaybe = new Prelude.Functor(function (_83) {
    return function (_84) {
        if (_84 instanceof Just) {
            return new Just(_83(_84.value0));
        };
        return Nothing.value;
    };
});
var fromMaybe = function (a) {
    return maybe(a)(Prelude.id(Prelude.categoryArr));
};
var extendMaybe = new Control_Extend.Extend(function (_91) {
    return function (_92) {
        if (_92 instanceof Nothing) {
            return Nothing.value;
        };
        return Just.create(_91(_92));
    };
}, function () {
    return functorMaybe;
});
var eqMaybe = function (__dict_Eq_3) {
    return new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMaybe(__dict_Eq_3))(a)(b);
        };
    }, function (_96) {
        return function (_97) {
            if (_96 instanceof Nothing && _97 instanceof Nothing) {
                return true;
            };
            if (_96 instanceof Just && _97 instanceof Just) {
                return Prelude["=="](__dict_Eq_3)(_96.value0)(_97.value0);
            };
            return false;
        };
    });
};
var ordMaybe = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqMaybe(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_98) {
        return function (_99) {
            if (_98 instanceof Just && _99 instanceof Just) {
                return Prelude.compare(__dict_Ord_2)(_98.value0)(_99.value0);
            };
            if (_98 instanceof Nothing && _99 instanceof Nothing) {
                return Prelude.EQ.value;
            };
            if (_98 instanceof Nothing) {
                return Prelude.LT.value;
            };
            if (_99 instanceof Nothing) {
                return Prelude.GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
};
var applyMaybe = new Prelude.Apply(function (_85) {
    return function (_86) {
        if (_85 instanceof Just) {
            return Prelude["<$>"](functorMaybe)(_85.value0)(_86);
        };
        if (_85 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorMaybe;
});
var bindMaybe = new Prelude.Bind(function (_89) {
    return function (_90) {
        if (_89 instanceof Just) {
            return _90(_89.value0);
        };
        if (_89 instanceof Nothing) {
            return Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return applyMaybe;
});
var applicativeMaybe = new Prelude.Applicative(function () {
    return applyMaybe;
}, Just.create);
var monadMaybe = new Prelude.Monad(function () {
    return applicativeMaybe;
}, function () {
    return bindMaybe;
});
var altMaybe = new Control_Alt.Alt(function (_87) {
    return function (_88) {
        if (_87 instanceof Nothing) {
            return _88;
        };
        return _87;
    };
}, function () {
    return functorMaybe;
});
var plusMaybe = new Control_Plus.Plus(function () {
    return altMaybe;
}, Nothing.value);
var alternativeMaybe = new Control_Alternative.Alternative(function () {
    return plusMaybe;
}, function () {
    return applicativeMaybe;
});
var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
    return alternativeMaybe;
}, function () {
    return monadMaybe;
});
module.exports = {
    Just: Just, 
    Nothing: Nothing, 
    altMaybe: altMaybe, 
    alternativeMaybe: alternativeMaybe, 
    applicativeMaybe: applicativeMaybe, 
    applyMaybe: applyMaybe, 
    bindMaybe: bindMaybe, 
    eqMaybe: eqMaybe, 
    extendMaybe: extendMaybe, 
    fromMaybe: fromMaybe, 
    functorMaybe: functorMaybe, 
    isJust: isJust, 
    isNothing: isNothing, 
    maybe: maybe, 
    monadMaybe: monadMaybe, 
    monadPlusMaybe: monadPlusMaybe, 
    ordMaybe: ordMaybe, 
    plusMaybe: plusMaybe, 
    semigroupMaybe: semigroupMaybe, 
    showMaybe: showMaybe
};
