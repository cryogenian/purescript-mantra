-- Generated by psc-make version 0.6.2
module Signal where
import Data.Function ()
import Signal ()
import Prelude ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Data.Function ()
infixl 4 <~
infixl 4 ~>
infixl 4 ~
foreign import data Signal :: * -> *
foreign import (~) :: forall f a b. (Prelude.Apply f) => f (a -> b) -> f a -> f b
foreign import (~>) :: forall f a b. (Prelude.Functor f) => f a -> (a -> b) -> f b
foreign import (<~) :: forall f a b. (Prelude.Functor f) => (a -> b) -> f a -> f b
foreign import unwrap :: forall a e. Signal.Signal (Control.Monad.Eff.Eff e a) -> Control.Monad.Eff.Eff e (Signal.Signal a)
foreign import runSignal :: forall e. Signal.Signal (Control.Monad.Eff.Eff e Prelude.Unit) -> Control.Monad.Eff.Eff e Prelude.Unit
foreign import zip :: forall a b c. (a -> b -> c) -> Signal.Signal a -> Signal.Signal b -> Signal.Signal c
foreign import distinct' :: forall a. Signal.Signal a -> Signal.Signal a
foreign import distinct :: forall a. (Prelude.Eq a) => Signal.Signal a -> Signal.Signal a
foreign import sampleOn :: forall t243 t244. Signal.Signal t244 -> Signal.Signal t243 -> Signal.Signal t243
foreign import foldp :: forall t398 t406. (t406 -> t398 -> t398) -> t398 -> Signal.Signal t406 -> Signal.Signal t398
foreign import merge :: forall t259. Signal.Signal t259 -> Signal.Signal t259 -> Signal.Signal t259
foreign import applySig :: forall t446 t447. Signal.Signal (t447 -> t446) -> Signal.Signal t447 -> Signal.Signal t446
foreign import lift :: forall t376 t377. (t377 -> t376) -> Signal.Signal t377 -> Signal.Signal t376
foreign import constant :: forall a. a -> Signal.Signal a
foreign import instance functorSignal :: Prelude.Functor Signal.Signal
foreign import instance applySignal :: Prelude.Apply Signal.Signal
foreign import instance applicativeSignal :: Prelude.Applicative Signal.Signal
foreign import instance semigroupSignal :: Prelude.Semigroup (Signal.Signal a)
