// Generated by psc-make version 0.6.2
"use strict";
var Prelude = require("Prelude");
var Control_Alt = require("Control.Alt");
function Left(value0) {
    this.value0 = value0;
};
Left.create = function (value0) {
    return new Left(value0);
};
function Right(value0) {
    this.value0 = value0;
};
Right.create = function (value0) {
    return new Right(value0);
};
var showEither = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return new Prelude.Show(function (_75) {
            if (_75 instanceof Left) {
                return "Left (" + (Prelude.show(__dict_Show_0)(_75.value0) + ")");
            };
            if (_75 instanceof Right) {
                return "Right (" + (Prelude.show(__dict_Show_1)(_75.value0) + ")");
            };
            throw new Error("Failed pattern match");
        });
    };
};
var functorEither = new Prelude.Functor(function (_69) {
    return function (_70) {
        if (_70 instanceof Left) {
            return new Left(_70.value0);
        };
        if (_70 instanceof Right) {
            return new Right(_69(_70.value0));
        };
        throw new Error("Failed pattern match");
    };
});
var eqEither = function (__dict_Eq_4) {
    return function (__dict_Eq_5) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqEither(__dict_Eq_4)(__dict_Eq_5))(a)(b);
            };
        }, function (_76) {
            return function (_77) {
                if (_76 instanceof Left && _77 instanceof Left) {
                    return Prelude["=="](__dict_Eq_4)(_76.value0)(_77.value0);
                };
                if (_76 instanceof Right && _77 instanceof Right) {
                    return Prelude["=="](__dict_Eq_5)(_76.value0)(_77.value0);
                };
                return false;
            };
        });
    };
};
var ordEither = function (__dict_Ord_2) {
    return function (__dict_Ord_3) {
        return new Prelude.Ord(function () {
            return eqEither(__dict_Ord_2["__superclass_Prelude.Eq_0"]())(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
        }, function (_78) {
            return function (_79) {
                if (_78 instanceof Left && _79 instanceof Left) {
                    return Prelude.compare(__dict_Ord_2)(_78.value0)(_79.value0);
                };
                if (_78 instanceof Right && _79 instanceof Right) {
                    return Prelude.compare(__dict_Ord_3)(_78.value0)(_79.value0);
                };
                if (_78 instanceof Left) {
                    return Prelude.LT.value;
                };
                if (_79 instanceof Left) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
};
var either = function (_66) {
    return function (_67) {
        return function (_68) {
            if (_68 instanceof Left) {
                return _66(_68.value0);
            };
            if (_68 instanceof Right) {
                return _67(_68.value0);
            };
            throw new Error("Failed pattern match");
        };
    };
};
var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
var isRight = either(Prelude["const"](false))(Prelude["const"](true));
var applyEither = new Prelude.Apply(function (_71) {
    return function (_72) {
        if (_71 instanceof Left) {
            return new Left(_71.value0);
        };
        if (_71 instanceof Right) {
            return Prelude["<$>"](functorEither)(_71.value0)(_72);
        };
        throw new Error("Failed pattern match");
    };
}, function () {
    return functorEither;
});
var bindEither = new Prelude.Bind(either(function (e) {
    return function (_) {
        return new Left(e);
    };
})(function (a) {
    return function (f) {
        return f(a);
    };
}), function () {
    return applyEither;
});
var applicativeEither = new Prelude.Applicative(function () {
    return applyEither;
}, Right.create);
var monadEither = new Prelude.Monad(function () {
    return applicativeEither;
}, function () {
    return bindEither;
});
var altEither = new Control_Alt.Alt(function (_73) {
    return function (_74) {
        if (_73 instanceof Left) {
            return _74;
        };
        return _73;
    };
}, function () {
    return functorEither;
});
module.exports = {
    Left: Left, 
    Right: Right, 
    altEither: altEither, 
    applicativeEither: applicativeEither, 
    applyEither: applyEither, 
    bindEither: bindEither, 
    either: either, 
    eqEither: eqEither, 
    functorEither: functorEither, 
    isLeft: isLeft, 
    isRight: isRight, 
    monadEither: monadEither, 
    ordEither: ordEither, 
    showEither: showEither
};
