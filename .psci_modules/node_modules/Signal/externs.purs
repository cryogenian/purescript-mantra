module Signal where
import Data.Function ()
import Signal ()
import Prelude ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Data.Function ()
infixl 4 <~
infixl 4 ~>
infixl 4 ~
foreign import data Signal :: * -> *
foreign import (~) :: forall f a b. (Prelude.Apply f) => f (a -> b) -> f a -> f b
foreign import (~>) :: forall f a b. (Prelude.Functor f) => f a -> (a -> b) -> f b
foreign import (<~) :: forall f a b. (Prelude.Functor f) => (a -> b) -> f a -> f b
foreign import unwrap :: forall a e. Signal.Signal (Control.Monad.Eff.Eff e a) -> Control.Monad.Eff.Eff e (Signal.Signal a)
foreign import runSignal :: forall e. Signal.Signal (Control.Monad.Eff.Eff e Prelude.Unit) -> Control.Monad.Eff.Eff e Prelude.Unit
foreign import zip :: forall a b c. (a -> b -> c) -> Signal.Signal a -> Signal.Signal b -> Signal.Signal c
foreign import distinct' :: forall a. Signal.Signal a -> Signal.Signal a
foreign import distinct :: forall a. (Prelude.Eq a) => Signal.Signal a -> Signal.Signal a
foreign import sampleOn :: forall t240 t241. Signal.Signal t241 -> Signal.Signal t240 -> Signal.Signal t240
foreign import foldp :: forall t395 t403. (t403 -> t395 -> t395) -> t395 -> Signal.Signal t403 -> Signal.Signal t395
foreign import merge :: forall t256. Signal.Signal t256 -> Signal.Signal t256 -> Signal.Signal t256
foreign import applySig :: forall t443 t444. Signal.Signal (t444 -> t443) -> Signal.Signal t444 -> Signal.Signal t443
foreign import lift :: forall t373 t374. (t374 -> t373) -> Signal.Signal t374 -> Signal.Signal t373
foreign import constant :: forall a. a -> Signal.Signal a
foreign import instance functorSignal :: Prelude.Functor Signal.Signal
foreign import instance applySignal :: Prelude.Apply Signal.Signal
foreign import instance applicativeSignal :: Prelude.Applicative Signal.Signal
foreign import instance semigroupSignal :: Prelude.Semigroup (Signal.Signal a)
