"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Dual = {
    create: function (value) {
        return value;
    }
};
var showDual = function (__dict_Show_0) {
    return new Prelude.Show(function (_25) {
        return "Dual (" + (Prelude.show(__dict_Show_0)(_25) + ")");
    });
};
var semigroupDual = function (__dict_Semigroup_1) {
    return new Prelude.Semigroup(function (_26) {
        return function (_27) {
            return Prelude["<>"](__dict_Semigroup_1)(_27)(_26);
        };
    });
};
var runDual = function (_18) {
    return _18;
};
var monoidDual = function (__dict_Monoid_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDual(__dict_Monoid_3["__superclass_Prelude.Semigroup_0"]());
    }, Data_Monoid.mempty(__dict_Monoid_3));
};
var eqDual = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_21) {
        return function (_22) {
            return Prelude["/="](__dict_Eq_4)(_21)(_22);
        };
    }, function (_19) {
        return function (_20) {
            return Prelude["=="](__dict_Eq_4)(_19)(_20);
        };
    });
};
var ordDual = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqDual(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_23) {
        return function (_24) {
            return Prelude.compare(__dict_Ord_2)(_23)(_24);
        };
    });
};
module.exports = {
    Dual: Dual, 
    eqDual: eqDual, 
    monoidDual: monoidDual, 
    ordDual: ordDual, 
    runDual: runDual, 
    semigroupDual: semigroupDual, 
    showDual: showDual
};
