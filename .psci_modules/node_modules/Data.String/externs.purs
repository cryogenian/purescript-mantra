module Data.String where
import Data.Function ()
import Data.String ()
import Data.Char ()
import Data.String.Unsafe ()
import Prim ()
import Prelude ()
import Data.Maybe ()
import Data.Char ()
import Data.Function ()
import Data.String.Unsafe ()
foreign import joinWith :: Prim.String -> [Prim.String] -> Prim.String
foreign import trim :: Prim.String -> Prim.String
foreign import toUpper :: Prim.String -> Prim.String
foreign import toLower :: Prim.String -> Prim.String
foreign import toCharArray :: Prim.String -> [Data.Char.Char]
foreign import split :: Prim.String -> Prim.String -> [Prim.String]
foreign import dropWhile :: (Data.Char.Char -> Prim.Boolean) -> Prim.String -> Prim.String
foreign import drop :: Prim.Number -> Prim.String -> Prim.String
foreign import takeWhile :: (Data.Char.Char -> Prim.Boolean) -> Prim.String -> Prim.String
foreign import take :: Prim.Number -> Prim.String -> Prim.String
foreign import count :: (Data.Char.Char -> Prim.Boolean) -> Prim.String -> Prim.Number
foreign import replace :: Prim.String -> Prim.String -> Prim.String -> Prim.String
foreign import localeCompare :: Prim.String -> Prim.String -> Prim.Number
foreign import singleton :: Data.Char.Char -> Prim.String
foreign import length :: Prim.String -> Prim.Number
foreign import uncons :: Prim.String -> Data.Maybe.Maybe { tail :: Prim.String, head :: Data.Char.Char }
foreign import null :: Prim.String -> Prim.Boolean
foreign import lastIndexOf' :: Prim.String -> Prim.Number -> Prim.String -> Prim.Number
foreign import lastIndexOf :: Prim.String -> Prim.String -> Prim.Number
foreign import indexOf' :: Prim.String -> Prim.Number -> Prim.String -> Prim.Number
foreign import indexOf :: Prim.String -> Prim.String -> Prim.Number
foreign import fromChar :: Data.Char.Char -> Prim.String
foreign import fromCharArray :: [Data.Char.Char] -> Prim.String
foreign import charCodeAt :: Prim.Number -> Prim.String -> Data.Maybe.Maybe Prim.Number
foreign import charAt :: Prim.Number -> Prim.String -> Data.Maybe.Maybe Data.Char.Char
