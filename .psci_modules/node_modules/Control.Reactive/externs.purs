module Control.Reactive where
import Prelude ()
import Control.Reactive ()
import Control.Monad.Eff.Ref.Unsafe ()
import Control.Monad.Eff.Ref ()
import Data.Monoid ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Data.Monoid ()
import Control.Monad.Eff.Ref ()
import Control.Monad.Eff.Ref.Unsafe ()
data Computed (a :: *) = Computed { subscribe :: forall eff. (a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Control.Reactive.Subscription, read :: forall eff. Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) a }
data RArrayChange (a :: *) = Inserted a Prim.Number | Updated a Prim.Number | Removed Prim.Number
data Subscription = Subscription (forall eff. Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit)
foreign import data Reactive :: !
foreign import data RArray :: * -> *
foreign import data RVar :: * -> *
foreign import subscribeComputed :: forall a eff. Control.Reactive.Computed a -> (a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Control.Reactive.Subscription
foreign import readComputed :: forall a eff. Control.Reactive.Computed a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) a
foreign import toComputedArray :: forall a. Control.Reactive.RArray a -> Control.Reactive.Computed [a]
foreign import toComputed :: forall a. Control.Reactive.RVar a -> Control.Reactive.Computed a
foreign import modifyRVar :: forall a eff. Control.Reactive.RVar a -> (a -> a) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit
foreign import subscribeArray :: forall a eff. Control.Reactive.RArray a -> (Control.Reactive.RArrayChange a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Control.Reactive.Subscription
foreign import subscribe :: forall a eff. Control.Reactive.RVar a -> (a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Control.Reactive.Subscription
foreign import updateRArray :: forall a eff. Control.Reactive.RArray a -> a -> Prim.Number -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit
foreign import removeRArray :: forall a eff. Control.Reactive.RArray a -> Prim.Number -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) a
foreign import insertRArray :: forall a eff. Control.Reactive.RArray a -> a -> Prim.Number -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit
foreign import peekRArray :: forall a eff. Control.Reactive.RArray a -> Prim.Number -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) a
foreign import writeRVar :: forall a eff. Control.Reactive.RVar a -> a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) Prelude.Unit
foreign import readRArray :: forall a eff. Control.Reactive.RArray a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) [a]
foreign import readRVar :: forall a eff. Control.Reactive.RVar a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) a
foreign import newRArray :: forall a eff. Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) (Control.Reactive.RArray a)
foreign import newRVar :: forall a eff. a -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | eff) (Control.Reactive.RVar a)
foreign import instance semigroupSubscription :: Prelude.Semigroup Control.Reactive.Subscription
foreign import instance monoidSubscription :: Data.Monoid.Monoid Control.Reactive.Subscription
foreign import instance showArrayChange :: (Prelude.Show a) => Prelude.Show (Control.Reactive.RArrayChange a)
foreign import instance bindComputed :: Prelude.Bind Control.Reactive.Computed
foreign import instance applicativeComputed :: Prelude.Applicative Control.Reactive.Computed
foreign import instance applyComputed :: Prelude.Apply Control.Reactive.Computed
foreign import instance functorComputed :: Prelude.Functor Control.Reactive.Computed
foreign import instance monadComputed :: Prelude.Monad Control.Reactive.Computed
