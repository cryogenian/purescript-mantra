"use strict";
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Prelude_Unsafe = require("Prelude.Unsafe");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
function length (xs) {  return xs.length;};
function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
function reverse (l) {  return l.slice().reverse();};
function drop (n) {  return function (l) {    return l.slice(n);  };};
function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
var $dot$dot = range;
var $bang$bang = function (xs) {
    return function (n) {
        var isInt = function (n_1) {
            return n_1 !== ~~n_1;
        };
        return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
    };
};
var take = function (n) {
    return slice(0)(n);
};
var tail = function (_81) {
    if (_81.length >= 1) {
        var _269 = _81.slice(1);
        return new Data_Maybe.Just(_269);
    };
    return Data_Maybe.Nothing.value;
};
var span = (function () {
    var go = function (__copy__97) {
        return function (__copy__98) {
            return function (__copy__99) {
                var _97 = __copy__97;
                var _98 = __copy__98;
                var _99 = __copy__99;
                tco: while (true) {
                    if (_99.length >= 1) {
                        var _274 = _99.slice(1);
                        if (_98(_99[0])) {
                            var __tco__97 = Prelude[":"](_99[0])(_97);
                            var __tco__98 = _98;
                            _97 = __tco__97;
                            _98 = __tco__98;
                            _99 = _274;
                            continue tco;
                        };
                    };
                    return {
                        init: reverse(_97), 
                        rest: _99
                    };
                };
            };
        };
    };
    return go([  ]);
})();
var sortBy = function (comp) {
    return function (xs) {
        var comp$prime = function (x) {
            return function (y) {
                var _275 = comp(x)(y);
                if (_275 instanceof Prelude.GT) {
                    return 1;
                };
                if (_275 instanceof Prelude.EQ) {
                    return 0;
                };
                if (_275 instanceof Prelude.LT) {
                    return -1;
                };
                throw new Error("Failed pattern match");
            };
        };
        return sortJS(comp$prime)(xs);
    };
};
var sort = function (__dict_Ord_0) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_0))(xs);
    };
};
var singleton = function (a) {
    return [ a ];
};
var semigroupArray = new Prelude.Semigroup(append);
var $$null = function (_83) {
    if (_83.length === 0) {
        return true;
    };
    return false;
};
var nubBy = function (_90) {
    return function (_91) {
        if (_91.length === 0) {
            return [  ];
        };
        if (_91.length >= 1) {
            var _280 = _91.slice(1);
            return Prelude[":"](_91[0])(nubBy(_90)(filter(function (y) {
                return !_90(_91[0])(y);
            })(_280)));
        };
        throw new Error("Failed pattern match");
    };
};
var nub = function (__dict_Eq_1) {
    return nubBy(Prelude["=="](__dict_Eq_1));
};
var mapMaybe = function (f) {
    return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
};
var last = function (__copy__80) {
    var _80 = __copy__80;
    tco: while (true) {
        if (_80.length >= 1) {
            var _283 = _80.slice(1);
            if (_283.length === 0) {
                return new Data_Maybe.Just(_80[0]);
            };
        };
        if (_80.length >= 1) {
            var _285 = _80.slice(1);
            _80 = _285;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var intersectBy = function (_87) {
    return function (_88) {
        return function (_89) {
            if (_88.length === 0) {
                return [  ];
            };
            if (_89.length === 0) {
                return [  ];
            };
            var el = function (x) {
                return findIndex(_87(x))(_89) >= 0;
            };
            return filter(el)(_88);
        };
    };
};
var intersect = function (__dict_Eq_2) {
    return intersectBy(Prelude["=="](__dict_Eq_2));
};
var init = function (_82) {
    if (_82.length === 0) {
        return Data_Maybe.Nothing.value;
    };
    return new Data_Maybe.Just(slice(0)(length(_82) - 1)(_82));
};
var head = function (_79) {
    if (_79.length >= 1) {
        var _292 = _79.slice(1);
        return new Data_Maybe.Just(_79[0]);
    };
    return Data_Maybe.Nothing.value;
};
var groupBy = (function () {
    var go = function (__copy__94) {
        return function (__copy__95) {
            return function (__copy__96) {
                var _94 = __copy__94;
                var _95 = __copy__95;
                var _96 = __copy__96;
                tco: while (true) {
                    if (_96.length === 0) {
                        return reverse(_94);
                    };
                    if (_96.length >= 1) {
                        var _297 = _96.slice(1);
                        var sp = span(_95(_96[0]))(_297);
                        var __tco__94 = Prelude[":"](Prelude[":"](_96[0])(sp.init))(_94);
                        var __tco__95 = _95;
                        _94 = __tco__94;
                        _95 = __tco__95;
                        _96 = sp.rest;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return go([  ]);
})();
var group = function (__dict_Eq_3) {
    return function (xs) {
        return groupBy(Prelude["=="](__dict_Eq_3))(xs);
    };
};
var group$prime = function (__dict_Ord_4) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_4["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_4));
};
var functorArray = new Prelude.Functor(map);
var elemLastIndex = function (__dict_Eq_5) {
    return function (x) {
        return findLastIndex(Prelude["=="](__dict_Eq_5)(x));
    };
};
var elemIndex = function (__dict_Eq_6) {
    return function (x) {
        return findIndex(Prelude["=="](__dict_Eq_6)(x));
    };
};
var deleteBy = function (_84) {
    return function (_85) {
        return function (_86) {
            if (_86.length === 0) {
                return [  ];
            };
            var _301 = findIndex(_84(_85))(_86);
            if (_301 < 0) {
                return _86;
            };
            return deleteAt(_301)(1)(_86);
        };
    };
};
var $$delete = function (__dict_Eq_7) {
    return deleteBy(Prelude["=="](__dict_Eq_7));
};
var $bslash$bslash = function (__dict_Eq_8) {
    return function (xs) {
        return function (ys) {
            var go = function (__copy__92) {
                return function (__copy__93) {
                    var _92 = __copy__92;
                    var _93 = __copy__93;
                    tco: while (true) {
                        if (_93.length === 0) {
                            return _92;
                        };
                        if (_92.length === 0) {
                            return [  ];
                        };
                        if (_93.length >= 1) {
                            var _305 = _93.slice(1);
                            var __tco__92 = $$delete(__dict_Eq_8)(_93[0])(_92);
                            _92 = __tco__92;
                            _93 = _305;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
            return go(xs)(ys);
        };
    };
};
var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
var monadArray = new Prelude.Monad(function () {
    return applicativeArray;
}, function () {
    return bindArray;
});
var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
    return applyArray;
});
var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
    return functorArray;
});
var applicativeArray = new Prelude.Applicative(function () {
    return applyArray;
}, singleton);
var altArray = new Control_Alt.Alt(append, function () {
    return functorArray;
});
var plusArray = new Control_Plus.Plus(function () {
    return altArray;
}, [  ]);
var alternativeArray = new Control_Alternative.Alternative(function () {
    return plusArray;
}, function () {
    return applicativeArray;
});
var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
    return alternativeArray;
}, function () {
    return monadArray;
});
module.exports = {
    "!!": $bang$bang, 
    "..": $dot$dot, 
    "\\\\": $bslash$bslash, 
    altArray: altArray, 
    alternativeArray: alternativeArray, 
    append: append, 
    applicativeArray: applicativeArray, 
    applyArray: applyArray, 
    bindArray: bindArray, 
    catMaybes: catMaybes, 
    concat: concat, 
    concatMap: concatMap, 
    "delete": $$delete, 
    deleteAt: deleteAt, 
    deleteBy: deleteBy, 
    drop: drop, 
    elemIndex: elemIndex, 
    elemLastIndex: elemLastIndex, 
    filter: filter, 
    findIndex: findIndex, 
    findLastIndex: findLastIndex, 
    functorArray: functorArray, 
    group: group, 
    "group'": group$prime, 
    groupBy: groupBy, 
    head: head, 
    init: init, 
    insertAt: insertAt, 
    intersect: intersect, 
    intersectBy: intersectBy, 
    last: last, 
    length: length, 
    map: map, 
    mapMaybe: mapMaybe, 
    monadArray: monadArray, 
    monadPlusArray: monadPlusArray, 
    nub: nub, 
    nubBy: nubBy, 
    "null": $$null, 
    plusArray: plusArray, 
    range: range, 
    reverse: reverse, 
    semigroupArray: semigroupArray, 
    singleton: singleton, 
    snoc: snoc, 
    sort: sort, 
    sortBy: sortBy, 
    span: span, 
    tail: tail, 
    take: take, 
    updateAt: updateAt, 
    zipWith: zipWith
};
