module Data.Map where
import Data.Map ()
import Prelude ()
import Data.Foldable ()
import Data.Tuple ()
import Data.Traversable ()
import Data.Array ()
import Data.Maybe ()
import Prim ()
import Prelude ()
import Data.Array ()
import Data.Maybe ()
import Data.Tuple ()
import Data.Monoid ()
import Data.Foldable ()
import Data.Traversable ()
data Map (k :: *) (v :: *)
foreign import size :: forall k v. Data.Map.Map k v -> Prim.Number
foreign import map :: forall k a b. (a -> b) -> Data.Map.Map k a -> Data.Map.Map k b
foreign import unions :: forall k v. (Prelude.Ord k) => [Data.Map.Map k v] -> Data.Map.Map k v
foreign import unionWith :: forall k v. (Prelude.Ord k) => (v -> v -> v) -> Data.Map.Map k v -> Data.Map.Map k v -> Data.Map.Map k v
foreign import union :: forall k v. (Prelude.Ord k) => Data.Map.Map k v -> Data.Map.Map k v -> Data.Map.Map k v
foreign import values :: forall k v. Data.Map.Map k v -> [v]
foreign import keys :: forall k v. Data.Map.Map k v -> [k]
foreign import update :: forall k v. (Prelude.Ord k) => (v -> Data.Maybe.Maybe v) -> k -> Data.Map.Map k v -> Data.Map.Map k v
foreign import alter :: forall k v. (Prelude.Ord k) => (Data.Maybe.Maybe v -> Data.Maybe.Maybe v) -> k -> Data.Map.Map k v -> Data.Map.Map k v
foreign import member :: forall k v. (Prelude.Ord k) => k -> Data.Map.Map k v -> Prim.Boolean
foreign import delete :: forall k v. (Prelude.Ord k) => k -> Data.Map.Map k v -> Data.Map.Map k v
foreign import fromList :: forall k v. (Prelude.Ord k) => [Data.Tuple.Tuple k v] -> Data.Map.Map k v
foreign import toList :: forall k v. Data.Map.Map k v -> [Data.Tuple.Tuple k v]
foreign import lookup :: forall k v. (Prelude.Ord k) => k -> Data.Map.Map k v -> Data.Maybe.Maybe v
foreign import insert :: forall k v. (Prelude.Ord k) => k -> v -> Data.Map.Map k v -> Data.Map.Map k v
foreign import checkValid :: forall k v. Data.Map.Map k v -> Prim.Boolean
foreign import singleton :: forall k v. k -> v -> Data.Map.Map k v
foreign import isEmpty :: forall k v. Data.Map.Map k v -> Prim.Boolean
foreign import empty :: forall k v. Data.Map.Map k v
foreign import showTree :: forall k v. (Prelude.Show k, Prelude.Show v) => Data.Map.Map k v -> Prim.String
foreign import instance eqMap :: (Prelude.Eq k, Prelude.Eq v) => Prelude.Eq (Data.Map.Map k v)
foreign import instance showMap :: (Prelude.Show k, Prelude.Show v) => Prelude.Show (Data.Map.Map k v)
foreign import instance semigroupMap :: (Prelude.Ord k) => Prelude.Semigroup (Data.Map.Map k v)
foreign import instance monoidMap :: (Prelude.Ord k) => Data.Monoid.Monoid (Data.Map.Map k v)
foreign import instance functorMap :: Prelude.Functor (Data.Map.Map k)
foreign import instance foldableMap :: Data.Foldable.Foldable (Data.Map.Map k)
foreign import instance traversableMap :: (Prelude.Ord k) => Data.Traversable.Traversable (Data.Map.Map k)
