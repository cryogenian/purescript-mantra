module Data.StrMap.ST where
import Data.StrMap.ST ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Control.Monad.ST ()
import Data.Maybe ()
foreign import data STStrMap :: * -> * -> *
foreign import delete :: forall a h r. Data.StrMap.ST.STStrMap h a -> Prim.String -> Control.Monad.Eff.Eff (st :: Control.Monad.ST.ST h | r) (Data.StrMap.ST.STStrMap h a)
foreign import poke :: forall a h r. Data.StrMap.ST.STStrMap h a -> Prim.String -> a -> Control.Monad.Eff.Eff (st :: Control.Monad.ST.ST h | r) (Data.StrMap.ST.STStrMap h a)
foreign import peek :: forall a h r. Data.StrMap.ST.STStrMap h a -> Prim.String -> Control.Monad.Eff.Eff (st :: Control.Monad.ST.ST h | r) a
foreign import new :: forall a h r. Control.Monad.Eff.Eff (st :: Control.Monad.ST.ST h | r) (Data.StrMap.ST.STStrMap h a)
