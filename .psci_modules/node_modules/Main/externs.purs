module Main where
import Prelude ()
import Control.Reactive ()
import Utils ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Control.Reactive ()
import Data.StrMap ()
import Utils ()
newtype Component (input :: *) (output :: *) = Component { output :: Control.Reactive.RVar output, input :: Control.Reactive.RVar input }
newtype Componen (s :: *) (e :: # !) = Componen { render :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, modify :: (s -> s) -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, get :: Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) s, set :: s -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit, state :: Control.Reactive.RVar s }
foreign import data Event :: *
foreign import main :: forall t101. Control.Monad.Eff.Eff t101 Prelude.Unit
foreign import init :: forall inp out e. (inp -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) (Main.Component inp out)
foreign import sub :: forall inp out e. (out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit) -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Control.Reactive.Subscription
foreign import set :: forall inp out e. inp -> Main.Component inp out -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | e) Prelude.Unit
foreign import mkComponent :: forall t77 t96 t97. t97 -> t96 -> Control.Monad.Eff.Eff (reactive :: Control.Reactive.Reactive | t77) (Main.Component t97 t96)
