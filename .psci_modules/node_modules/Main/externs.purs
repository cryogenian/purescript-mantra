module Main where
import Data.Function ()
import Main ()
import Signal ()
import Prelude ()
import Data.Maybe ()
import Data.StrMap ()
import Utils ()
import Prim ()
import Prelude ()
import Control.Monad.Eff ()
import Control.Reactive ()
import Data.Maybe ()
import Data.Tuple ()
import Data.Foldable ()
import Data.StrMap ()
import Data.Function ()
import Signal ()
import Signal.Time ()
import Signal.Extension ()
import Utils ()
type Node = { tagName :: Prim.String, dataset :: Data.StrMap.StrMap Prim.String, id :: Prim.String }
foreign import data Event :: *
foreign import main :: forall t130. Control.Monad.Eff.Eff t130 Prelude.Unit
foreign import stateCombine :: Signal.Signal Prim.Number
foreign import combineS :: Signal.Signal (Prim.Number -> Prim.Number)
foreign import isBody :: Data.Maybe.Maybe Main.Node -> Prim.Boolean
foreign import isFoo :: Data.Maybe.Maybe Main.Node -> Prim.Boolean
foreign import modifySum :: forall t31. (t31 -> Prim.Boolean) -> t31 -> Prim.Number -> Prim.Number
foreign import modifyMult :: forall t35. (t35 -> Prim.Boolean) -> t35 -> Prim.Number -> Prim.Number
foreign import modifyWhen :: forall a s. (s -> s) -> (a -> Prim.Boolean) -> a -> s -> s
foreign import clickTargets :: Signal.Signal (Data.Maybe.Maybe { tagName :: Prim.String, dataset :: Data.StrMap.StrMap Prim.String, id :: Prim.String })
foreign import mouseClicked :: Signal.Signal (Data.Maybe.Maybe Main.Event)
foreign import eventStream :: Prim.String -> Signal.Signal (Data.Maybe.Maybe Main.Event)
foreign import document :: Main.Node
foreign import eventStreamFn :: forall s. Data.Function.Fn4 (s -> Data.Maybe.Maybe s) (Data.Maybe.Maybe s) (s -> Signal.Signal s) Prim.String (Signal.Signal (Data.Maybe.Maybe Main.Event))
foreign import target :: Main.Event -> Main.Node
