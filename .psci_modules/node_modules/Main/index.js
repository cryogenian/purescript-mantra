"use strict";
var Data_Function = require("Data.Function");
var Signal = require("Signal");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Data_StrMap = require("Data.StrMap");
var Utils = require("Utils");
var Signal_Extension = require("Signal.Extension");

function target(event) {
  var out = event.target;
  if (!out.dataset) {
    out.dataset = {};
  }
  return out;
}
;

function eventStreamFn(just, nothing, constant, type) {
  var out = constant(nothing);
  window.addEventListener(type, function(e) {
    out.set(just(e));
  });
  return out;
}
;

var document = window.document
;
var modifyWhen = function (func) {
    return function (pred) {
        return function (a) {
            return pred(a) ? func : Prelude.id(Prelude.categoryArr);
        };
    };
};
var modifySum = modifyWhen(function (a) {
    return a + 1;
});
var modifyMult = modifyWhen(function (b) {
    return b * 2;
});
var isFoo = function (mbEl) {
    return Data_Maybe.isJust(Prelude[">>="](Data_Maybe.bindMaybe)(mbEl)(function (_0) {
        return Data_StrMap.lookup("foo")(_0.dataset);
    }));
};
var isBody = function (mbEl) {
    return Data_Maybe.fromMaybe(false)(Prelude[">>="](Data_Maybe.bindMaybe)(mbEl)(function (_1) {
        return Prelude["return"](Data_Maybe.monadMaybe)(_1.tagName === "HTML");
    }));
};
var eventStream = Data_Function.runFn4(eventStreamFn)(Data_Maybe.Just.create)(Data_Maybe.Nothing.value)(Signal.constant);
var mouseClicked = eventStream("click");
var clickTargets = Signal_Extension["~~>"](Data_Maybe.applicativeMaybe)(mouseClicked)(target);
var combineS = Signal["~>"](Signal.functorSignal)(clickTargets)(function (mb) {
    return Prelude["<<<"](Prelude.semigroupoidArr)(modifySum(isFoo)(mb))(modifyMult(isBody)(mb));
});
var stateCombine = Signal.distinct(Prelude.eqNumber)(Signal.foldp(Prelude["$"])(1)(combineS));
var main = Signal.runSignal(Signal["~>"](Signal.functorSignal)(stateCombine)(Utils.whisper));
module.exports = {
    clickTargets: clickTargets, 
    combineS: combineS, 
    document: document, 
    eventStream: eventStream, 
    eventStreamFn: eventStreamFn, 
    isBody: isBody, 
    isFoo: isFoo, 
    main: main, 
    modifyMult: modifyMult, 
    modifySum: modifySum, 
    modifyWhen: modifyWhen, 
    mouseClicked: mouseClicked, 
    stateCombine: stateCombine, 
    target: target
};
