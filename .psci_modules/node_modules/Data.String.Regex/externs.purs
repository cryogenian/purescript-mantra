module Data.String.Regex where
import Data.String.Regex ()
import Data.String ()
import Data.Function ()
import Prim ()
import Prelude ()
import Data.Function ()
import Data.Maybe ()
import Data.String ()
type RegexFlags = { unicode :: Prim.Boolean, sticky :: Prim.Boolean, multiline :: Prim.Boolean, ignoreCase :: Prim.Boolean, global :: Prim.Boolean }
foreign import data Regex :: *
foreign import split :: Data.String.Regex.Regex -> Prim.String -> [Prim.String]
foreign import search :: Data.String.Regex.Regex -> Prim.String -> Prim.Number
foreign import replace' :: Data.String.Regex.Regex -> (Prim.String -> [Prim.String] -> Prim.String) -> Prim.String -> Prim.String
foreign import replace :: Data.String.Regex.Regex -> Prim.String -> Prim.String -> Prim.String
foreign import match :: Data.String.Regex.Regex -> Prim.String -> Data.Maybe.Maybe [Prim.String]
foreign import test :: Data.String.Regex.Regex -> Prim.String -> Prim.Boolean
foreign import parseFlags :: Prim.String -> Data.String.Regex.RegexFlags
foreign import renderFlags :: Data.String.Regex.RegexFlags -> Prim.String
foreign import flags :: Data.String.Regex.Regex -> Data.String.Regex.RegexFlags
foreign import source :: Data.String.Regex.Regex -> Prim.String
foreign import regex :: Prim.String -> Data.String.Regex.RegexFlags -> Data.String.Regex.Regex
foreign import instance showRegex :: Prelude.Show Data.String.Regex.Regex
